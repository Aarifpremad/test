<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Spin Wheel Settings</title>
    <link rel="stylesheet" href="/dashboard.css">
    <link rel="stylesheet" href="/speen.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.dataTables.min.css">
</head>
<body>
    <%- include('partials/header') %>
    <div class="main-container">
        <%- include('partials/sidebar', { page: 'spin' }) %>
        <div class="main-content">
            <div class="settings-container">
                <div class="row justify-content-start px-4">
                    <div class="col-lg-8">
                        <h2 class="mb-4">Spin Wheel Settings</h2>
                        
                        <div id="prize-list">
                            <!-- Prize items will be dynamically added here -->
                        </div>
                        <div class="buttons-container">
                            <button class="save-prize-button" onclick="savePrizes()">Save</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const prizeList = document.getElementById('prize-list');
    
        // Populate prize items with exactly 12 rows from the server data or placeholders
        async function fetchPrizes() {
            const response = await fetch('/api/prizes');
            const prizes = await response.json();
    
            for (let i = 0; i < 12; i++) {
                const prize = prizes[i] || { title: '', amount: '' }; // Use empty values if no prize data exists
                const prizeItem = document.createElement('div');
                prizeItem.classList.add('mb-3');  // Adds margin-bottom for spacing between items
    
                // Create a container for each row of inputs
                const row = document.createElement('div');
                row.classList.add('row');
    
                // Prize Title Label and Input
                const titleCol = document.createElement('div');
                titleCol.classList.add('col-md-6');  // 6 columns to fit 2 inputs per row
                const titleLabel = document.createElement('label');
                titleLabel.classList.add('form-label');
                titleLabel.textContent = `Prize Title ${i + 1}:`;
                const titleInput = document.createElement('input');
                titleInput.type = 'text';
                titleInput.value = prize.title;
                titleInput.placeholder = 'Enter Prize Title';
                titleInput.classList.add('form-control');
    
                // Amount Label and Input
                const amountCol = document.createElement('div');
                amountCol.classList.add('col-md-6');  // 6 columns to fit 2 inputs per row
                const amountLabel = document.createElement('label');
                amountLabel.classList.add('form-label');
                amountLabel.textContent = `Amount ${i + 1}:`;
                const amountInput = document.createElement('input');
                amountInput.type = 'number';
                amountInput.value = prize.amount;
                amountInput.placeholder = 'Enter Amount';
                amountInput.classList.add('form-control');
    
                // Append label and input to their respective columns
                titleCol.appendChild(titleLabel);
                titleCol.appendChild(titleInput);
                amountCol.appendChild(amountLabel);
                amountCol.appendChild(amountInput);
    
                // Append columns to row
                row.appendChild(titleCol);
                row.appendChild(amountCol);
    
                // Append row to prize item
                prizeItem.appendChild(row);
    
                // Append prize item to prize list
                prizeList.appendChild(prizeItem);
            }
        }
    
        // Save prizes to the server
        async function savePrizes() {
            const prizes = Array.from(prizeList.children).map(item => {
                return {
                    title: item.querySelector('input[type="text"]').value,
                    amount: parseFloat(item.querySelector('input[type="number"]').value) || 0,
                };
            });
    
            await fetch('/api/prizes', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(prizes),
            });
    
            alert('Prizes saved successfully!');
        }
    
        // Load prizes on page load
        fetchPrizes();
    </script>
</body>


</html>